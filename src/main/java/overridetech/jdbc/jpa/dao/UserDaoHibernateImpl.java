package overridetech.jdbc.jpa.dao;

import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;
import overridetech.jdbc.jpa.model.User;
import overridetech.jdbc.jpa.util.Util;

import java.util.List;

public class UserDaoHibernateImpl implements UserDao {
    public UserDaoHibernateImpl() {
    }

    @Override
    public void createUsersTable() {
        try {
            String sql = "create table if not exists public.users (id bigint primary key generated by default as identity, first_name varchar(256) not null, last_name varchar(256), age smallint)";
            Session session = Util.getSessionFactory().openSession();
            Transaction tx1 = session.beginTransaction();
            session.createSQLQuery(sql).executeUpdate();
            tx1.commit();
            session.close();
        } catch (HibernateException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public void dropUsersTable() {
        try {
            String sql = "drop table if exists public.users";
            Session session = Util.getSessionFactory().openSession();
            Transaction tx1 = session.beginTransaction();
            session.createSQLQuery(sql).executeUpdate();
            tx1.commit();
            session.close();
        } catch (HibernateException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public void saveUser(String name, String lastName, byte age) {
        try {
            User user = new User(name, lastName, age);
            Session session = Util.getSessionFactory().openSession();
            Transaction tx1 = session.beginTransaction();
            session.save(user);
            tx1.commit();
            session.close();
        } catch (HibernateException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public void removeUserById(long id) {
        try {
            Session session = Util.getSessionFactory().openSession();
            Transaction tx1 = session.beginTransaction();
            User user = (User) session.get(User.class, id);
            if (user != null) {
                session.delete(user);
            }
            tx1.commit();
            session.close();
        } catch (HibernateException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public List<User> getAllUsers() {
        try {
            Session session = Util.getSessionFactory().openSession();
            Transaction tx1 = session.beginTransaction();
            List<User> users = (List<User>) session.createQuery("from User").list();
            tx1.commit();
            session.close();
            return users;
        } catch (HibernateException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public void cleanUsersTable() {
        try {
            Session session = Util.getSessionFactory().openSession();
            Transaction tx1 = session.beginTransaction();
            session.createQuery("delete from User").executeUpdate();
            tx1.commit();
            session.close();
        } catch (HibernateException e) {
            throw new RuntimeException(e);
        }
    }
}
